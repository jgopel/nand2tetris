// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {

   IN  inM[16],         // M value input  (M = contents of RAM[A])
       instruction[16], // Instruction for execution
       reset;           // Signals whether to re-start the current
                        // program (reset==1) or continue executing
                        // the current program (reset==0).

   OUT outM[16],        // M value output
       writeM,          // Write to M?
       addressM[15],    // Address in data memory (of M)
       pc[15];          // address of next instruction

   PARTS:

   //   15 > > > > > > > > 0
   // A: 0vvv vvvv vvvv vvvv
   // D: 111a cccc ccdd djjj

   // Determine instruction type
   DMux( in=true, sel=instruction[15], a=AInst, b=CInst );


   // A register instructions

   And( a=CInst, b=instruction[5], out=CtoA );
   Or( a=AInst, b=CtoA, out=toA );
   // Use ALU data for C instructions and input for A instructions
   Mux16( a=instruction, b=ALUout, sel=CtoA, out=ARegInput );
   ARegister( in=ARegInput, load=toA, out=ARegOut );
   Or16( a=false, b=ARegOut, out[0..14]=addressM );


   // D register instructions

   And( a=CInst, b=instruction[4], out=toD );
   DRegister( in=ALUout, load=toD, out=DRegOut );


   // ALU instructions

   Mux16( a=ARegOut, b=inM, sel=instruction[12], out=AMoutput );
   ALU( x=DRegOut, y=AMoutput,
        zx=instruction[11], nx=instruction[10],  zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6],
        out=ALUout,
        zr=eq, ng=lt
   );
   Or16( a=false, b=ALUout, out=outM );
   And( a=CInst, b=instruction[3], out=writeM );


   // PC instructions

   Not( in=lt, out=nlt );
   Not( in=eq, out=neq );
   And( a=nlt, b=neq, out=gt );
   Or( a=eq, b=lt, out=lte );
   Or( a=eq, b=gt, out=gte );
   Or( a=lt, b=gt, out=ne );
   //Jumps
   And( a=instruction[2], b=lt, out=jlt );
   And( a=instruction[1], b=eq, out=jeq );
   And( a=instruction[0], b=gt, out=jgt );
   Or( a=jlt, b=jeq, out=jlte );
   Or( a=jgt, b=jeq, out=jgte );
   Or( a=jlt, b=jgt, out=jne );
   Or( a=jeq, b=jne, out=jmp );
   //Jump or not
   Or( a=jlte,    b=jgte, out=toJump1 );
   Or( a=toJump1, b=jne,  out=toJump2 );
   Or( a=toJump2, b=jmp,  out=toJump3 );
   And( a=CInst, b=toJump3, out=toJump );
   Not( in=toJump, out=noJump );

   PC( in=ARegOut, load=toJump, inc=noJump, reset=reset, out[0..14]=pc );
}
